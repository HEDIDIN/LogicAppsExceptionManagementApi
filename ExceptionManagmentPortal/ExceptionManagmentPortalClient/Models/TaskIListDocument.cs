// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace ExceptionManagmentPortal.Models
{
    public partial class TaskIListDocument
    {
        private string _asyncState;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string AsyncState
        {
            get { return this._asyncState; }
            set { this._asyncState = value; }
        }
        
        private int? _creationOptions;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? CreationOptions
        {
            get { return this._creationOptions; }
            set { this._creationOptions = value; }
        }
        
        private string _exception;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Exception
        {
            get { return this._exception; }
            set { this._exception = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool? _isCanceled;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsCanceled
        {
            get { return this._isCanceled; }
            set { this._isCanceled = value; }
        }
        
        private bool? _isCompleted;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsCompleted
        {
            get { return this._isCompleted; }
            set { this._isCompleted = value; }
        }
        
        private bool? _isFaulted;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsFaulted
        {
            get { return this._isFaulted; }
            set { this._isFaulted = value; }
        }
        
        private IList<string> _result;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Result
        {
            get { return this._result; }
            set { this._result = value; }
        }
        
        private int? _status;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TaskIListDocument class.
        /// </summary>
        public TaskIListDocument()
        {
            this.Result = new LazyList<string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken asyncStateValue = inputObject["AsyncState"];
                if (asyncStateValue != null && asyncStateValue.Type != JTokenType.Null)
                {
                    this.AsyncState = asyncStateValue.ToString(Newtonsoft.Json.Formatting.Indented);
                }
                JToken creationOptionsValue = inputObject["CreationOptions"];
                if (creationOptionsValue != null && creationOptionsValue.Type != JTokenType.Null)
                {
                    this.CreationOptions = ((int)creationOptionsValue);
                }
                JToken exceptionValue = inputObject["Exception"];
                if (exceptionValue != null && exceptionValue.Type != JTokenType.Null)
                {
                    this.Exception = exceptionValue.ToString(Newtonsoft.Json.Formatting.Indented);
                }
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken isCanceledValue = inputObject["IsCanceled"];
                if (isCanceledValue != null && isCanceledValue.Type != JTokenType.Null)
                {
                    this.IsCanceled = ((bool)isCanceledValue);
                }
                JToken isCompletedValue = inputObject["IsCompleted"];
                if (isCompletedValue != null && isCompletedValue.Type != JTokenType.Null)
                {
                    this.IsCompleted = ((bool)isCompletedValue);
                }
                JToken isFaultedValue = inputObject["IsFaulted"];
                if (isFaultedValue != null && isFaultedValue.Type != JTokenType.Null)
                {
                    this.IsFaulted = ((bool)isFaultedValue);
                }
                JToken resultSequence = ((JToken)inputObject["Result"]);
                if (resultSequence != null && resultSequence.Type != JTokenType.Null)
                {
                    foreach (JToken resultValue in ((JArray)resultSequence))
                    {
                        this.Result.Add(resultValue.ToString(Newtonsoft.Json.Formatting.Indented));
                    }
                }
                JToken statusValue = inputObject["Status"];
                if (statusValue != null && statusValue.Type != JTokenType.Null)
                {
                    this.Status = ((int)statusValue);
                }
            }
        }
    }
}
